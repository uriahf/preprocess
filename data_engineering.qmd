---
title: "Data Pre-Processing 🔧"
subtitle: "Or Things You Need to Do Before Modelling"
author: "Uriah Finkel"
format:
  revealjs:
    theme: sky
    incremental: true 
---

## Agenda

-   Why Data Pre-Processing is important for Data Science?

-   Show some of the Pre-Processing workflow of a Data Scientist

# Why Pre-Processing? 🤔

## What most people think we do:

![](robot_ai.jpg){fig-align="center"}

## What we think we do:

![](plumber_data2.jpg){fig-align="center" width="636"}

## We Need Both

::: columns
::: {.column width="50%"}
### 🤖

-   Automation of Human Knowledge.

-   Leveraging Huge Computation Capabilities.

-   It Sounds Cool!
:::

::: {.column width="50%"}
### 👨‍🔧

-   We translate Data to Numbers.

-   Leveraging Domain Knowledge.

-   Doesn't sound as cool.
:::
:::

## World Cup 2022 ⚽

{{< iconify flag ar-4x3 >}} Argentina 1

{{< iconify flag sa-4x3 >}} Saudi Arabia 2

![](messi.jpg){fig-align="center"}

## World Cup 2022 ⚽

#### Robots are Extremly Accurate 🤖

::: columns
::: {.column width="50%"}
![](offside_1.PNG)
:::

::: {.column width="50%"}
![](offside_2.PNG)
:::
:::

## World Cup 2022 ⚽

#### Without a good plumber accuracy is irrelevant 👨‍🔧

![](offside_3.PNG){fig-align="center"}

## Typical Data Science Workflow

![](data-science-workflow.png)

Pre-Processing is a part of iterative workflow

-   **Tidy:** Make the data ***Tidy*** and ready for analysis 🧹

-   **Transform:** ***Transform*** the raw data 🐛➡🦋

-   **Visualize:** ***Visualize*** the data 👀

## Typical Workflow

```{r}
options(knitr.kable.NA = '')

data_before_processing <- tibble::tibble(
  id = 1:6,
  city = c("Haifa", "Nahariah", "Tel Aviv", "Beer-Sheva", "Jerusalem", "Tel Aviv"),
  smoker = c("No", "No", "Yes", "No", "No", "Yes"),
  age = c(28, 31, 42, 39, 30, 33),
  weight = c(77, 80, 83, 70, 76, NA),
  height = c(1.88, 1.6, 1.68, 1.73, 1.78, NA),
  immigrated = c(NA, NA, "02/03/1980", NA, NA, NA),
  pob = c("ET", "IL", "IL", "YE", "IL", "YE"),
  cost = c(118, 35, 140, 43, 59, 38)
)
```

# Tidy 🧹

## What is Tidy Data 🧹 {.smaller}

> Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.

::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r}
tidy_table <- data_before_processing |> 
  dplyr::select(id, age, smoker, cost) |> 
  gt::gt() 

tidy_table 
```
:::
:::

## What is Tidy Data 🧹 {.smaller}

> Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.

::: columns
::: {.column width="50%"}
Each [**Variable**]{style="background-color: #F3B9CD"} is a [**Column**]{style="background-color: #F3B9CD"}
:::

::: {.column width="50%"}
```{r}

tidy_table |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#F3B9CD"),
    locations = gt::cells_body(
      columns = age
    )
  )
```
:::
:::

## What is Tidy Data 🧹 {.smaller}

> Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.

::: columns
::: {.column width="50%"}
Each [**Variable**]{style="background-color: #F3B9CD"} is a [**Column**]{style="background-color: #F3B9CD"}

Each [**Observation**]{style="background-color: #EDCAAB"} is a [**Row**]{style="background-color: #EDCAAB"}
:::

::: {.column width="50%"}
```{r}

tidy_table |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#F3B9CD"),
    locations = gt::cells_body(
      columns = age
    )
  ) |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#EDCAAB"),
    locations = gt::cells_body(rows = 2)
  )

```
:::
:::

## What is Tidy Data 🧹 {.smaller}

> Tidy data is a standard way of mapping the meaning of a dataset to its structure. A dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types.

::: columns
::: {.column width="50%"}
Each [**Variable**]{style="background-color: #F3B9CD"} is a [**Column**]{style="background-color: #F3B9CD"}

Each [**Observation**]{style="background-color: #EDCAAB"} is a [**Row**]{style="background-color: #EDCAAB"}

Each [**Value**]{style="background-color: #EEFFC2"} is in a [**Different Cell**]{style="background-color: #EEFFC2"}
:::

::: {.column width="50%"}
```{r}

tidy_table |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#F3B9CD"),
    locations = gt::cells_body(
      columns = age
    )
  ) |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#EDCAAB"),
    locations = gt::cells_body(rows = 2)
  ) |> 
  gt::tab_style(
    style = gt::cell_fill(color = "#EEFFC2"),
    locations = gt::cells_body(
      rows = 2, 
      columns = age)
  )

```
:::
:::

------------------------------------------------------------------------

![](tidy_data_1.jpg)

[©TIDY DATA SERIES BY LOWNDES & HORST By Julia Lowndes and Allison Horst.](https://allisonhorst.com/other-r-fun)

------------------------------------------------------------------------

![](tidy_data_2.jpg)

[©TIDY DATA SERIES BY LOWNDES & HORST By Julia Lowndes and Allison Horst.](https://allisonhorst.com/other-r-fun)

## Combine Data from Different Resources

::: columns
::: {.column width="50%"}
We have one table that includes the ID number, the Age and the Place of Birth of each patient.
:::

::: {.column width="50%"}
```{r}

data_before_processing |> 
  dplyr::select(
    id, age, pob
  ) |> 
  knitr::kable()

```
:::
:::

## Combine Data from Different Resources

::: columns
::: {.column width="50%"}
We have one table that includes the ID number, the age and the Place of Birth of each patient, and we have a another table that includes the cost of each individual patient.
:::

::: {.column width="50%"}
```{r}

data_before_processing |> 
  dplyr::select(
    id, cost
  )|> 
  knitr::kable()

```
:::
:::

## Combine Data from Different Resources {.smaller}

In order to make one tidy data we need a key 🔑 to the value. The value will be the ID Column (Teudat Zehut).

::: columns
::: {.column width="50%"}
```{r}

data_before_processing |> 
  dplyr::select(
    id, age, pob
  ) |> 
  knitr::kable()

```
:::

::: {.column width="50%"}
```{r}

data_before_processing |> 
  dplyr::select(
    id, cost
  )|> 
  knitr::kable()

```
:::
:::

## One Table to Work On {.smaller}

```{r}

knitr::kable(data_before_processing)

```

## Long Format to Wide Format

# Visualize 👀

## Types of Variables {.smaller}

::: columns
::: {.column width="50%"}
#### **Binary Variables 👍👎**

"Yes" or "No". Encoded (mostly) as 1 for Yes and 0 for No.

Current Smoker: 🚬 🚭

#### **Categorical Variables**

Place of Birth: {{< iconify flag il-4x3 >}} {{< iconify flag ye-4x3 >}} {{< iconify flag et-4x3 >}}

#### **Continuous Variables**

Age: 👧 👩 👵
:::

::: {.column width="50%"}
```{r}
data_before_processing |> 
  dplyr::select(
    smoker, pob, age
  ) |> 
  knitr::kable()
```
:::
:::

## Summary Tables (Table 1)

## Plots

# Basic Exploration 🔦

## Summary Tables (Table 1)

```{r}

data_before_processing |>
  gtsummary::tbl_summary(
    type = list(
      id ~ "continuous",
      city ~ "categorical",
      weight ~ "continuous",
      height ~ "continuous",
      age ~ "continuous",
      cost ~ "continuous",
      smoker ~ "dichotomous")
  ) #|>
  # gtsummary::as_tibble(
  # )

```

## 1D Vizualization

::: panel-tabset
### Continuous - Histogram

```{r}
library(ggplot2)

ggplot(
  data_before_processing,
  aes(x = age)
) +
  geom_histogram() +
  theme_classic()

```

### Discrete - Histogram

```{r}
library(ggplot2)

ggplot(
  data_before_processing,
  aes(x = city)
) +
  geom_histogram(stat="count") +
  theme_classic()

```
:::

## 2D Vizualization

### Continuous and Continuous - Scatter

```{r}
library(ggplot2)

ggplot(
  data_before_processing,
  aes(x = height, y = weight)
) +
  geom_point() +
  theme_classic()

```


# Transform 🐛➡🦋

## Missing Values

## Encoding Categorical Variables

